/*Шаг 1. Первая транзакция для каждого студента. */

with first_payments as
    (
    select  user_id,
            min(date_trunc ('day', transaction_datetime)) as first_payment
        from skyeng_db.payments
    where status_name = 'success'
    group by 1
    order by 1
    ),



/*Шаг 2. Таблица с датами за каждый календарный день 2016 года.*/

all_dates as
    (
    select date_trunc ('day', class_start_datetime) as dt
        from skyeng_db.classes
    where class_start_datetime < '2017-01-01'
    group by 1
    order by 1
    ),
    
    
    
/*Шаг 3. Опредлеляем за какие даты имеет смысл собирать баланс для каждого студента.*/

all_dates_by_user as
    (
    select  user_id,
            all_dates.dt as dt
        from first_payments
            join all_dates
                on all_dates.dt >= first_payments.first_payment
    ),



/*Шаг 4. Все изменения балансов, связанные с успешными транзакциями.*/

payments_by_dates as
    (
    select  user_id,
            date_trunc ('day', transaction_datetime) as payment_day,
            sum (classes) as transaction_balance_change
        from skyeng_db.payments
    where status_name = 'success'
    group by 1, 2
    order by 1, 2
    ),
    
    
    
/*Шаг 5. Бланс студентов, сформированый только транзакциями.*/

payments_by_dates_cumsum as 
    (select all_dates_by_user.user_id as user_id,
            all_dates_by_user.dt as dt,
            case when payments_by_dates.transaction_balance_change is not null then payments_by_dates.transaction_balance_change else 0 end as transaction_balance_change,
            sum (transaction_balance_change) over(partition by all_dates_by_user.user_id order by all_dates_by_user.dt) as transaction_balance_change_cs
    from all_dates_by_user
        left join payments_by_dates
            on payments_by_dates.user_id = all_dates_by_user.user_id
            and payments_by_dates.payment_day = all_dates_by_user.dt
    order by 1, 2
    ),



/*Шаг 6. Изменения балансов из-за прохождения уроков.*/

classes_by_dates as 
    (select user_id,
            date_trunc ('day', class_start_datetime) as class_date,
            count (id_class)*-1 as classes
        from skyeng_db.classes
    where class_status in ('success', 'failed_by_student')
          and class_type != 'trial'
    group by 1, 2    
    ),



/*Шаг 7. Кумулятивная сумма количества пройденных уроков.*/

classes_by_dates_dates_cumsum as 
    (select all_dates_by_user.user_id,
            all_dates_by_user.dt as dt,
            case when classes is not null then classes else 0 end as classes,
            case when sum(classes) over (partition by all_dates_by_user.user_id order by all_dates_by_user.dt) is not null then sum(classes) over (partition by all_dates_by_user.user_id order by all_dates_by_user.dt) else 0 end as classes_cs
    from all_dates_by_user
        left join classes_by_dates
            on all_dates_by_user.dt = classes_by_dates.class_date
            and all_dates_by_user.user_id = classes_by_dates.user_id
    order by 1
    ),



/*Шаг 8. Общий баланс каждого студента.*/

balances as 
    (select classes_by_dates_dates_cumsum.user_id,
            classes_by_dates_dates_cumsum.dt,
            payments_by_dates_cumsum.transaction_balance_change,
            payments_by_dates_cumsum.transaction_balance_change_cs,
            classes_by_dates_dates_cumsum.classes,
            classes_by_dates_dates_cumsum.classes_cs,
            (payments_by_dates_cumsum.transaction_balance_change_cs + classes_by_dates_dates_cumsum.classes_cs) as balance
        from  classes_by_dates_dates_cumsum 
            join payments_by_dates_cumsum 
                on classes_by_dates_dates_cumsum.user_id = payments_by_dates_cumsum.user_id
                and classes_by_dates_dates_cumsum.dt = payments_by_dates_cumsum.dt
    order by 2
    )



/* 9 Шаг. Изменение общего количества уроков на балансах студентов.*/

-- select  dt,
--         sum (transaction_balance_change) as sum_transaction_balance_change,
--         sum (transaction_balance_change_cs) as sum_transaction_balance_change_cs,
--         sum (classes) as sum_classes,
--         sum (classes_cs) as sum_classes_cs,
--         sum (balance) as sum_balance
--     from balances
-- group by 1
-- order by 1



select *
from balances
order by 1, 2
limit 1000

